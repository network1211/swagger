# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse2XX1(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, address_line_1: str=None, address_line_2: str=None, city: str=None, country_id: str=None, customer_id: int=None, full_name: str=None, id: str=None, phone: str=None, region: str=None, zip: str=None):  # noqa: E501
        """InlineResponse2XX1 - a model defined in Swagger

        :param address_line_1: The address_line_1 of this InlineResponse2XX1.  # noqa: E501
        :type address_line_1: str
        :param address_line_2: The address_line_2 of this InlineResponse2XX1.  # noqa: E501
        :type address_line_2: str
        :param city: The city of this InlineResponse2XX1.  # noqa: E501
        :type city: str
        :param country_id: The country_id of this InlineResponse2XX1.  # noqa: E501
        :type country_id: str
        :param customer_id: The customer_id of this InlineResponse2XX1.  # noqa: E501
        :type customer_id: int
        :param full_name: The full_name of this InlineResponse2XX1.  # noqa: E501
        :type full_name: str
        :param id: The id of this InlineResponse2XX1.  # noqa: E501
        :type id: str
        :param phone: The phone of this InlineResponse2XX1.  # noqa: E501
        :type phone: str
        :param region: The region of this InlineResponse2XX1.  # noqa: E501
        :type region: str
        :param zip: The zip of this InlineResponse2XX1.  # noqa: E501
        :type zip: str
        """
        self.swagger_types = {
            'address_line_1': str,
            'address_line_2': str,
            'city': str,
            'country_id': str,
            'customer_id': int,
            'full_name': str,
            'id': str,
            'phone': str,
            'region': str,
            'zip': str
        }

        self.attribute_map = {
            'address_line_1': 'address_line_1',
            'address_line_2': 'address_line_2',
            'city': 'city',
            'country_id': 'country_id',
            'customer_id': 'customer_id',
            'full_name': 'full_name',
            'id': 'id',
            'phone': 'phone',
            'region': 'region',
            'zip': 'zip'
        }
        self._address_line_1 = address_line_1
        self._address_line_2 = address_line_2
        self._city = city
        self._country_id = country_id
        self._customer_id = customer_id
        self._full_name = full_name
        self._id = id
        self._phone = phone
        self._region = region
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2XX1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_2XX_1 of this InlineResponse2XX1.  # noqa: E501
        :rtype: InlineResponse2XX1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line_1(self) -> str:
        """Gets the address_line_1 of this InlineResponse2XX1.


        :return: The address_line_1 of this InlineResponse2XX1.
        :rtype: str
        """
        return self._address_line_1

    @address_line_1.setter
    def address_line_1(self, address_line_1: str):
        """Sets the address_line_1 of this InlineResponse2XX1.


        :param address_line_1: The address_line_1 of this InlineResponse2XX1.
        :type address_line_1: str
        """
        if address_line_1 is None:
            raise ValueError("Invalid value for `address_line_1`, must not be `None`")  # noqa: E501

        self._address_line_1 = address_line_1

    @property
    def address_line_2(self) -> str:
        """Gets the address_line_2 of this InlineResponse2XX1.


        :return: The address_line_2 of this InlineResponse2XX1.
        :rtype: str
        """
        return self._address_line_2

    @address_line_2.setter
    def address_line_2(self, address_line_2: str):
        """Sets the address_line_2 of this InlineResponse2XX1.


        :param address_line_2: The address_line_2 of this InlineResponse2XX1.
        :type address_line_2: str
        """
        if address_line_2 is None:
            raise ValueError("Invalid value for `address_line_2`, must not be `None`")  # noqa: E501

        self._address_line_2 = address_line_2

    @property
    def city(self) -> str:
        """Gets the city of this InlineResponse2XX1.


        :return: The city of this InlineResponse2XX1.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this InlineResponse2XX1.


        :param city: The city of this InlineResponse2XX1.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def country_id(self) -> str:
        """Gets the country_id of this InlineResponse2XX1.


        :return: The country_id of this InlineResponse2XX1.
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id: str):
        """Sets the country_id of this InlineResponse2XX1.


        :param country_id: The country_id of this InlineResponse2XX1.
        :type country_id: str
        """
        if country_id is None:
            raise ValueError("Invalid value for `country_id`, must not be `None`")  # noqa: E501

        self._country_id = country_id

    @property
    def customer_id(self) -> int:
        """Gets the customer_id of this InlineResponse2XX1.


        :return: The customer_id of this InlineResponse2XX1.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: int):
        """Sets the customer_id of this InlineResponse2XX1.


        :param customer_id: The customer_id of this InlineResponse2XX1.
        :type customer_id: int
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def full_name(self) -> str:
        """Gets the full_name of this InlineResponse2XX1.


        :return: The full_name of this InlineResponse2XX1.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name: str):
        """Sets the full_name of this InlineResponse2XX1.


        :param full_name: The full_name of this InlineResponse2XX1.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def id(self) -> str:
        """Gets the id of this InlineResponse2XX1.


        :return: The id of this InlineResponse2XX1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this InlineResponse2XX1.


        :param id: The id of this InlineResponse2XX1.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def phone(self) -> str:
        """Gets the phone of this InlineResponse2XX1.


        :return: The phone of this InlineResponse2XX1.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this InlineResponse2XX1.


        :param phone: The phone of this InlineResponse2XX1.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def region(self) -> str:
        """Gets the region of this InlineResponse2XX1.


        :return: The region of this InlineResponse2XX1.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: str):
        """Sets the region of this InlineResponse2XX1.


        :param region: The region of this InlineResponse2XX1.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def zip(self) -> str:
        """Gets the zip of this InlineResponse2XX1.


        :return: The zip of this InlineResponse2XX1.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip: str):
        """Sets the zip of this InlineResponse2XX1.


        :param zip: The zip of this InlineResponse2XX1.
        :type zip: str
        """
        if zip is None:
            raise ValueError("Invalid value for `zip`, must not be `None`")  # noqa: E501

        self._zip = zip
