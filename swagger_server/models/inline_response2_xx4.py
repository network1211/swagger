# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse2XX4(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active: str=None, created_on: str=None, email: str=None, first_name: str=None, id: int=None, last_login: str=None, last_name: str=None, oauth_provider: str=None, oauth_uid: str=None, photo: str=None, photo_url: str=None, user_phone: str=None, username: str=None):  # noqa: E501
        """InlineResponse2XX4 - a model defined in Swagger

        :param active: The active of this InlineResponse2XX4.  # noqa: E501
        :type active: str
        :param created_on: The created_on of this InlineResponse2XX4.  # noqa: E501
        :type created_on: str
        :param email: The email of this InlineResponse2XX4.  # noqa: E501
        :type email: str
        :param first_name: The first_name of this InlineResponse2XX4.  # noqa: E501
        :type first_name: str
        :param id: The id of this InlineResponse2XX4.  # noqa: E501
        :type id: int
        :param last_login: The last_login of this InlineResponse2XX4.  # noqa: E501
        :type last_login: str
        :param last_name: The last_name of this InlineResponse2XX4.  # noqa: E501
        :type last_name: str
        :param oauth_provider: The oauth_provider of this InlineResponse2XX4.  # noqa: E501
        :type oauth_provider: str
        :param oauth_uid: The oauth_uid of this InlineResponse2XX4.  # noqa: E501
        :type oauth_uid: str
        :param photo: The photo of this InlineResponse2XX4.  # noqa: E501
        :type photo: str
        :param photo_url: The photo_url of this InlineResponse2XX4.  # noqa: E501
        :type photo_url: str
        :param user_phone: The user_phone of this InlineResponse2XX4.  # noqa: E501
        :type user_phone: str
        :param username: The username of this InlineResponse2XX4.  # noqa: E501
        :type username: str
        """
        self.swagger_types = {
            'active': str,
            'created_on': str,
            'email': str,
            'first_name': str,
            'id': int,
            'last_login': str,
            'last_name': str,
            'oauth_provider': str,
            'oauth_uid': str,
            'photo': str,
            'photo_url': str,
            'user_phone': str,
            'username': str
        }

        self.attribute_map = {
            'active': 'active',
            'created_on': 'created_on',
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'last_login': 'last_login',
            'last_name': 'last_name',
            'oauth_provider': 'oauth_provider',
            'oauth_uid': 'oauth_uid',
            'photo': 'photo',
            'photo_url': 'photoUrl',
            'user_phone': 'user_phone',
            'username': 'username'
        }
        self._active = active
        self._created_on = created_on
        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_login = last_login
        self._last_name = last_name
        self._oauth_provider = oauth_provider
        self._oauth_uid = oauth_uid
        self._photo = photo
        self._photo_url = photo_url
        self._user_phone = user_phone
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2XX4':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_2XX_4 of this InlineResponse2XX4.  # noqa: E501
        :rtype: InlineResponse2XX4
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> str:
        """Gets the active of this InlineResponse2XX4.


        :return: The active of this InlineResponse2XX4.
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active: str):
        """Sets the active of this InlineResponse2XX4.


        :param active: The active of this InlineResponse2XX4.
        :type active: str
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def created_on(self) -> str:
        """Gets the created_on of this InlineResponse2XX4.


        :return: The created_on of this InlineResponse2XX4.
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on: str):
        """Sets the created_on of this InlineResponse2XX4.


        :param created_on: The created_on of this InlineResponse2XX4.
        :type created_on: str
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")  # noqa: E501

        self._created_on = created_on

    @property
    def email(self) -> str:
        """Gets the email of this InlineResponse2XX4.


        :return: The email of this InlineResponse2XX4.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this InlineResponse2XX4.


        :param email: The email of this InlineResponse2XX4.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self) -> str:
        """Gets the first_name of this InlineResponse2XX4.


        :return: The first_name of this InlineResponse2XX4.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this InlineResponse2XX4.


        :param first_name: The first_name of this InlineResponse2XX4.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def id(self) -> int:
        """Gets the id of this InlineResponse2XX4.


        :return: The id of this InlineResponse2XX4.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this InlineResponse2XX4.


        :param id: The id of this InlineResponse2XX4.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def last_login(self) -> str:
        """Gets the last_login of this InlineResponse2XX4.


        :return: The last_login of this InlineResponse2XX4.
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login: str):
        """Sets the last_login of this InlineResponse2XX4.


        :param last_login: The last_login of this InlineResponse2XX4.
        :type last_login: str
        """
        if last_login is None:
            raise ValueError("Invalid value for `last_login`, must not be `None`")  # noqa: E501

        self._last_login = last_login

    @property
    def last_name(self) -> str:
        """Gets the last_name of this InlineResponse2XX4.


        :return: The last_name of this InlineResponse2XX4.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this InlineResponse2XX4.


        :param last_name: The last_name of this InlineResponse2XX4.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def oauth_provider(self) -> str:
        """Gets the oauth_provider of this InlineResponse2XX4.


        :return: The oauth_provider of this InlineResponse2XX4.
        :rtype: str
        """
        return self._oauth_provider

    @oauth_provider.setter
    def oauth_provider(self, oauth_provider: str):
        """Sets the oauth_provider of this InlineResponse2XX4.


        :param oauth_provider: The oauth_provider of this InlineResponse2XX4.
        :type oauth_provider: str
        """
        if oauth_provider is None:
            raise ValueError("Invalid value for `oauth_provider`, must not be `None`")  # noqa: E501

        self._oauth_provider = oauth_provider

    @property
    def oauth_uid(self) -> str:
        """Gets the oauth_uid of this InlineResponse2XX4.


        :return: The oauth_uid of this InlineResponse2XX4.
        :rtype: str
        """
        return self._oauth_uid

    @oauth_uid.setter
    def oauth_uid(self, oauth_uid: str):
        """Sets the oauth_uid of this InlineResponse2XX4.


        :param oauth_uid: The oauth_uid of this InlineResponse2XX4.
        :type oauth_uid: str
        """
        if oauth_uid is None:
            raise ValueError("Invalid value for `oauth_uid`, must not be `None`")  # noqa: E501

        self._oauth_uid = oauth_uid

    @property
    def photo(self) -> str:
        """Gets the photo of this InlineResponse2XX4.


        :return: The photo of this InlineResponse2XX4.
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo: str):
        """Sets the photo of this InlineResponse2XX4.


        :param photo: The photo of this InlineResponse2XX4.
        :type photo: str
        """
        if photo is None:
            raise ValueError("Invalid value for `photo`, must not be `None`")  # noqa: E501

        self._photo = photo

    @property
    def photo_url(self) -> str:
        """Gets the photo_url of this InlineResponse2XX4.


        :return: The photo_url of this InlineResponse2XX4.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url: str):
        """Sets the photo_url of this InlineResponse2XX4.


        :param photo_url: The photo_url of this InlineResponse2XX4.
        :type photo_url: str
        """
        if photo_url is None:
            raise ValueError("Invalid value for `photo_url`, must not be `None`")  # noqa: E501

        self._photo_url = photo_url

    @property
    def user_phone(self) -> str:
        """Gets the user_phone of this InlineResponse2XX4.


        :return: The user_phone of this InlineResponse2XX4.
        :rtype: str
        """
        return self._user_phone

    @user_phone.setter
    def user_phone(self, user_phone: str):
        """Sets the user_phone of this InlineResponse2XX4.


        :param user_phone: The user_phone of this InlineResponse2XX4.
        :type user_phone: str
        """
        if user_phone is None:
            raise ValueError("Invalid value for `user_phone`, must not be `None`")  # noqa: E501

        self._user_phone = user_phone

    @property
    def username(self) -> str:
        """Gets the username of this InlineResponse2XX4.

        Credentials  # noqa: E501

        :return: The username of this InlineResponse2XX4.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this InlineResponse2XX4.

        Credentials  # noqa: E501

        :param username: The username of this InlineResponse2XX4.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username
