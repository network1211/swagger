# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Any  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.inline_response2_xx_order_address import InlineResponse2XXOrderAddress  # noqa: F401,E501
from swagger_server import util


class InlineResponse2XX(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, comment: str=None, coupon_id: str=None, created_at: str=None, customer_email: str=None, customer_firstname: str=None, customer_id: str=None, customer_lastname: str=None, discount: str=None, id: int=None, increment_id: str=None, order_address: List[InlineResponse2XXOrderAddress]=None, order_items: List[Object]=None, payment_method: str=None, shipping_method: str=None, status: str=None, total_price: str=None, updated_at: str=None):  # noqa: E501
        """InlineResponse2XX - a model defined in Swagger

        :param comment: The comment of this InlineResponse2XX.  # noqa: E501
        :type comment: str
        :param coupon_id: The coupon_id of this InlineResponse2XX.  # noqa: E501
        :type coupon_id: str
        :param created_at: The created_at of this InlineResponse2XX.  # noqa: E501
        :type created_at: str
        :param customer_email: The customer_email of this InlineResponse2XX.  # noqa: E501
        :type customer_email: str
        :param customer_firstname: The customer_firstname of this InlineResponse2XX.  # noqa: E501
        :type customer_firstname: str
        :param customer_id: The customer_id of this InlineResponse2XX.  # noqa: E501
        :type customer_id: str
        :param customer_lastname: The customer_lastname of this InlineResponse2XX.  # noqa: E501
        :type customer_lastname: str
        :param discount: The discount of this InlineResponse2XX.  # noqa: E501
        :type discount: str
        :param id: The id of this InlineResponse2XX.  # noqa: E501
        :type id: int
        :param increment_id: The increment_id of this InlineResponse2XX.  # noqa: E501
        :type increment_id: str
        :param order_address: The order_address of this InlineResponse2XX.  # noqa: E501
        :type order_address: List[InlineResponse2XXOrderAddress]
        :param order_items: The order_items of this InlineResponse2XX.  # noqa: E501
        :type order_items: List[Object]
        :param payment_method: The payment_method of this InlineResponse2XX.  # noqa: E501
        :type payment_method: str
        :param shipping_method: The shipping_method of this InlineResponse2XX.  # noqa: E501
        :type shipping_method: str
        :param status: The status of this InlineResponse2XX.  # noqa: E501
        :type status: str
        :param total_price: The total_price of this InlineResponse2XX.  # noqa: E501
        :type total_price: str
        :param updated_at: The updated_at of this InlineResponse2XX.  # noqa: E501
        :type updated_at: str
        """
        self.swagger_types = {
            'comment': str,
            'coupon_id': str,
            'created_at': str,
            'customer_email': str,
            'customer_firstname': str,
            'customer_id': str,
            'customer_lastname': str,
            'discount': str,
            'id': int,
            'increment_id': str,
            'order_address': List[InlineResponse2XXOrderAddress],
            'order_items': List[Object],
            'payment_method': str,
            'shipping_method': str,
            'status': str,
            'total_price': str,
            'updated_at': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'coupon_id': 'coupon_id',
            'created_at': 'created_at',
            'customer_email': 'customer_email',
            'customer_firstname': 'customer_firstname',
            'customer_id': 'customer_id',
            'customer_lastname': 'customer_lastname',
            'discount': 'discount',
            'id': 'id',
            'increment_id': 'increment_id',
            'order_address': 'orderAddress',
            'order_items': 'orderItems',
            'payment_method': 'payment_method',
            'shipping_method': 'shipping_method',
            'status': 'status',
            'total_price': 'total_price',
            'updated_at': 'updated_at'
        }
        self._comment = comment
        self._coupon_id = coupon_id
        self._created_at = created_at
        self._customer_email = customer_email
        self._customer_firstname = customer_firstname
        self._customer_id = customer_id
        self._customer_lastname = customer_lastname
        self._discount = discount
        self._id = id
        self._increment_id = increment_id
        self._order_address = order_address
        self._order_items = order_items
        self._payment_method = payment_method
        self._shipping_method = shipping_method
        self._status = status
        self._total_price = total_price
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2XX':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_2XX of this InlineResponse2XX.  # noqa: E501
        :rtype: InlineResponse2XX
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self) -> str:
        """Gets the comment of this InlineResponse2XX.


        :return: The comment of this InlineResponse2XX.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this InlineResponse2XX.


        :param comment: The comment of this InlineResponse2XX.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    @property
    def coupon_id(self) -> str:
        """Gets the coupon_id of this InlineResponse2XX.


        :return: The coupon_id of this InlineResponse2XX.
        :rtype: str
        """
        return self._coupon_id

    @coupon_id.setter
    def coupon_id(self, coupon_id: str):
        """Sets the coupon_id of this InlineResponse2XX.


        :param coupon_id: The coupon_id of this InlineResponse2XX.
        :type coupon_id: str
        """
        if coupon_id is None:
            raise ValueError("Invalid value for `coupon_id`, must not be `None`")  # noqa: E501

        self._coupon_id = coupon_id

    @property
    def created_at(self) -> str:
        """Gets the created_at of this InlineResponse2XX.


        :return: The created_at of this InlineResponse2XX.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this InlineResponse2XX.


        :param created_at: The created_at of this InlineResponse2XX.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def customer_email(self) -> str:
        """Gets the customer_email of this InlineResponse2XX.


        :return: The customer_email of this InlineResponse2XX.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email: str):
        """Sets the customer_email of this InlineResponse2XX.


        :param customer_email: The customer_email of this InlineResponse2XX.
        :type customer_email: str
        """
        if customer_email is None:
            raise ValueError("Invalid value for `customer_email`, must not be `None`")  # noqa: E501

        self._customer_email = customer_email

    @property
    def customer_firstname(self) -> str:
        """Gets the customer_firstname of this InlineResponse2XX.


        :return: The customer_firstname of this InlineResponse2XX.
        :rtype: str
        """
        return self._customer_firstname

    @customer_firstname.setter
    def customer_firstname(self, customer_firstname: str):
        """Sets the customer_firstname of this InlineResponse2XX.


        :param customer_firstname: The customer_firstname of this InlineResponse2XX.
        :type customer_firstname: str
        """
        if customer_firstname is None:
            raise ValueError("Invalid value for `customer_firstname`, must not be `None`")  # noqa: E501

        self._customer_firstname = customer_firstname

    @property
    def customer_id(self) -> str:
        """Gets the customer_id of this InlineResponse2XX.


        :return: The customer_id of this InlineResponse2XX.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: str):
        """Sets the customer_id of this InlineResponse2XX.


        :param customer_id: The customer_id of this InlineResponse2XX.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def customer_lastname(self) -> str:
        """Gets the customer_lastname of this InlineResponse2XX.


        :return: The customer_lastname of this InlineResponse2XX.
        :rtype: str
        """
        return self._customer_lastname

    @customer_lastname.setter
    def customer_lastname(self, customer_lastname: str):
        """Sets the customer_lastname of this InlineResponse2XX.


        :param customer_lastname: The customer_lastname of this InlineResponse2XX.
        :type customer_lastname: str
        """
        if customer_lastname is None:
            raise ValueError("Invalid value for `customer_lastname`, must not be `None`")  # noqa: E501

        self._customer_lastname = customer_lastname

    @property
    def discount(self) -> str:
        """Gets the discount of this InlineResponse2XX.


        :return: The discount of this InlineResponse2XX.
        :rtype: str
        """
        return self._discount

    @discount.setter
    def discount(self, discount: str):
        """Sets the discount of this InlineResponse2XX.


        :param discount: The discount of this InlineResponse2XX.
        :type discount: str
        """
        if discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")  # noqa: E501

        self._discount = discount

    @property
    def id(self) -> int:
        """Gets the id of this InlineResponse2XX.


        :return: The id of this InlineResponse2XX.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this InlineResponse2XX.


        :param id: The id of this InlineResponse2XX.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def increment_id(self) -> str:
        """Gets the increment_id of this InlineResponse2XX.


        :return: The increment_id of this InlineResponse2XX.
        :rtype: str
        """
        return self._increment_id

    @increment_id.setter
    def increment_id(self, increment_id: str):
        """Sets the increment_id of this InlineResponse2XX.


        :param increment_id: The increment_id of this InlineResponse2XX.
        :type increment_id: str
        """
        if increment_id is None:
            raise ValueError("Invalid value for `increment_id`, must not be `None`")  # noqa: E501

        self._increment_id = increment_id

    @property
    def order_address(self) -> List[InlineResponse2XXOrderAddress]:
        """Gets the order_address of this InlineResponse2XX.


        :return: The order_address of this InlineResponse2XX.
        :rtype: List[InlineResponse2XXOrderAddress]
        """
        return self._order_address

    @order_address.setter
    def order_address(self, order_address: List[InlineResponse2XXOrderAddress]):
        """Sets the order_address of this InlineResponse2XX.


        :param order_address: The order_address of this InlineResponse2XX.
        :type order_address: List[InlineResponse2XXOrderAddress]
        """
        if order_address is None:
            raise ValueError("Invalid value for `order_address`, must not be `None`")  # noqa: E501

        self._order_address = order_address

    @property
    def order_items(self) -> List[Object]:
        """Gets the order_items of this InlineResponse2XX.


        :return: The order_items of this InlineResponse2XX.
        :rtype: List[Object]
        """
        return self._order_items

    @order_items.setter
    def order_items(self, order_items: List[Object]):
        """Sets the order_items of this InlineResponse2XX.


        :param order_items: The order_items of this InlineResponse2XX.
        :type order_items: List[Object]
        """
        if order_items is None:
            raise ValueError("Invalid value for `order_items`, must not be `None`")  # noqa: E501

        self._order_items = order_items

    @property
    def payment_method(self) -> str:
        """Gets the payment_method of this InlineResponse2XX.


        :return: The payment_method of this InlineResponse2XX.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method: str):
        """Sets the payment_method of this InlineResponse2XX.


        :param payment_method: The payment_method of this InlineResponse2XX.
        :type payment_method: str
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")  # noqa: E501

        self._payment_method = payment_method

    @property
    def shipping_method(self) -> str:
        """Gets the shipping_method of this InlineResponse2XX.


        :return: The shipping_method of this InlineResponse2XX.
        :rtype: str
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method: str):
        """Sets the shipping_method of this InlineResponse2XX.


        :param shipping_method: The shipping_method of this InlineResponse2XX.
        :type shipping_method: str
        """
        if shipping_method is None:
            raise ValueError("Invalid value for `shipping_method`, must not be `None`")  # noqa: E501

        self._shipping_method = shipping_method

    @property
    def status(self) -> str:
        """Gets the status of this InlineResponse2XX.


        :return: The status of this InlineResponse2XX.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this InlineResponse2XX.


        :param status: The status of this InlineResponse2XX.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def total_price(self) -> str:
        """Gets the total_price of this InlineResponse2XX.


        :return: The total_price of this InlineResponse2XX.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price: str):
        """Sets the total_price of this InlineResponse2XX.


        :param total_price: The total_price of this InlineResponse2XX.
        :type total_price: str
        """
        if total_price is None:
            raise ValueError("Invalid value for `total_price`, must not be `None`")  # noqa: E501

        self._total_price = total_price

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this InlineResponse2XX.


        :return: The updated_at of this InlineResponse2XX.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this InlineResponse2XX.


        :param updated_at: The updated_at of this InlineResponse2XX.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at
